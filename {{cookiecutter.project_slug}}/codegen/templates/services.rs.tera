use std::sync::Arc;
use async_trait::async_trait;
use uuid::Uuid;

use crate::domain::errors::{{type_snake}}_errors::{{type_name}}Error ;
use crate::domain::models::{{type_snake}}::{Create{{type_name}}, {{type_name}}, Update{{type_name}}};
use crate::domain::repositories::repository::ResultPaging;
use crate::domain::repositories::{{type_snake}}::{{type_name}}QueryParams;
use crate::domain::repositories::{{type_snake}}::{{type_name}}Repository;
use crate::domain::services::{{type_snake}}::{{type_name}}Service;

#[derive(Clone)]
pub struct {{type_name}}ServiceImpl {
    pub repository: Arc<dyn {{type_name}}Repository>,
}

impl {{type_name}}ServiceImpl {
    pub fn new(repository: Arc<dyn {{type_name}}Repository>) -> Self {
        Self { repository }
    }
}

#[async_trait]
impl {{type_name}}Service for {{type_name}}ServiceImpl {
    async fn create(&self, item: Create{{type_name}}) -> Result<{{type_name}}, {{type_name}}Error > {
        match self.repository
            .create(&item)
            .await {
              Ok(item) => Ok(item),
              Err(err) => Err({{type_name}}Error::InternalServerError(err)),
            }
    }

    async fn update(&self, item: Update{{type_name}}) -> Result<{{type_name}}, {{type_name}}Error > {
        match self.repository
            .update(&item)
            .await {
              Ok(item) => Ok(item),
              Err(err) => Err({{type_name}}Error::InternalServerError(err)),
            }
    }

    async fn list(&self, params: {{type_name}}QueryParams) -> Result<ResultPaging<{{type_name}}>, {{type_name}}Error > {
        match self.repository
            .list(params)
            .await {
              Ok(item) => Ok(item),
              Err(err) => Err({{type_name}}Error::InternalServerError(err)),
            }
    }

    async fn get(&self, item_id: Uuid) -> Result<{{type_name}}, {{type_name}}Error > {
        match self.repository
            .get(item_id)
            .await {
              Ok(Some(item)) => Ok(item),
              Ok(None) => Err({{type_name}}Error::{{type_name}}DoesNotExist),
              Err(err) => Err({{type_name}}Error::InternalServerError(err)),
            }
    }

    async fn delete(&self, item_id: Uuid) -> Result<(), {{type_name}}Error > {
        match self.repository
            .delete(item_id)
            .await {
              Ok(item) => Ok(item),
              Err(err) => Err({{type_name}}Error::InternalServerError(err)),
            }
    }
}
