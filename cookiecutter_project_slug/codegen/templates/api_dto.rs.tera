use crate::domain::models::{{type_snake}}::{Create{{type_name}}, Update{{type_name}}, {{type_name}}};
use crate::domain::repositories::repository::ResultPaging;
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Deserialize, Serialize)]
pub struct Create{{type_name}}DTO {
    {%- for item in create_type_fields %}
    pub {{ item.field }}: {{ item.typ }},
    {%- endfor %}
}

#[derive(Deserialize, Serialize)]
pub struct Update{{type_name}}DTO {
    pub id: Uuid,
    {%- for item in create_type_fields %}
    pub {{ item.field }}: {{ item.typ }},
    {%- endfor %}
}

#[derive(Debug, Serialize)]
pub struct {{type_name}}DTO {
    {%- for item in type_fields %}
    pub {{ item.field }}: {{ item.typ }},
    {%- endfor %}
}

impl<'de> Deserialize<'de> for Create{{type_name}}DTO {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let raw = Raw{{type_name}}DTO::deserialize(deserializer)?;

        validate_{{type_snake}}_fields::<D>(&raw.name, &raw.description)?;

        Ok(Create{{type_name}}DTO {
            name: raw.name,
            description: raw.description,
        })
    }
}

impl<'de> Deserialize<'de> for Update{{type_name}}DTO {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let raw = Raw{{type_name}}DTO::deserialize(deserializer)?;

        let id = raw
            .id
            .ok_or_else(|| D::Error::custom("ID is required for update"))?;

        validate_{{type_snake}}_fields::<D>(&raw.name, &raw.description)?;

        Ok(Update{{type_name}}DTO {
            id,
            name: raw.name,
            description: raw.description,
        })
    }
}


