use std::sync::Arc;
use async_trait::async_trait;
use uuid::Uuid;

use crate::domain::error::CommonError;
use crate::domain::models::{{type_snake}}::{Create{{type_name}}, {{type_name}}, Update{{type_name}}};
use crate::domain::repositories::repository::ResultPaging;
use crate::domain::repositories::{{type_snake}}::{{type_name}}QueryParams;
use crate::domain::repositories::{{type_snake}}::{{type_name}}Repository;
use crate::domain::services::{{type_snake}}::{{type_name}}Service;

#[derive(Clone)]
pub struct {{type_name}}ServiceImpl {
    pub repository: Arc<dyn {{type_name}}Repository>,
}

impl {{type_name}}ServiceImpl {
    pub fn new(repository: Arc<dyn {{type_name}}Repository>) -> Self {
        Self { repository }
    }
}

#[async_trait]
impl {{type_name}}Service for {{type_name}}ServiceImpl {
    async fn create(&self, mut item: Create{{type_name}}) -> Result<{{type_name}}, CommonError> {
        self.repository
            .create(&mut item)
            .await
            .map_err(|e| {{type_name}}Error::InternalServerError(e.message.to_string()).into())
    }

    async fn update(&self, mut item: Update{{type_name}}) -> Result<{{type_name}}, CommonError> {
        self.repository
            .update(&mut item)
            .await
            .map_err(|e| {{type_name}}Error::InternalServerError(e.message.to_string()).into())
    }

    async fn list(&self, params: {{type_name}}QueryParams) -> Result<ResultPaging<{{type_name}}>, CommonError> {
        self.repository
            .list(params)
            .await
            .map_err(|e| {{type_name}}Error::InternalServerError(e.message.to_string()).into())
    }

    async fn get(&self, item_id: Uuid) -> Result<{{type_name}}, CommonError> {
        self.repository
            .get(item_id)
            .await
            .map_err(|e| {{type_name}}Error::InternalServerError(e.message.to_string()).into())
    }

    async fn delete(&self, item_id: Uuid) -> Result<(), CommonError> {
        self.repository
            .delete(item_id)
            .await
            .map_err(|e| {{type_name}}Error::InternalServerError(e.message.to_string()).into())
    }
}
