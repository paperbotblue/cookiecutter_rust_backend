use crate::domain::models::{{type_snake}}::{Create{{type_name}}, Update{{type_name}}, {{type_name}}};
use crate::domain::repositories::repository::{
    QueryParams, RepositoryResult, ResultPaging, DEFAULT_LIMIT, DEFAULT_OFFSET,
};
use async_trait::async_trait;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Serialize, Deserialize)]
pub struct {{type_name}}QueryParams {
    pub limit: Option<i64>,
    pub offset: Option<i64>,
    pub title: Option<String>,
}

impl QueryParams for {{type_name}}QueryParams {
    fn limit(&self) -> i64 {
        self.limit.or(DEFAULT_LIMIT).unwrap_or_default()
    }
    fn offset(&self) -> i64 {
        self.offset.or(DEFAULT_OFFSET).unwrap_or_default()
    }
}

#[async_trait]
pub trait {{type_name}}Repository: Send + Sync {
    async fn create(&self, new_{{type_snake}}: &Create{{type_name}}) -> RepositoryResult<{{type_name}}>;
    async fn update(&self, update_{{type_snake}}: &Update{{type_name}}) -> RepositoryResult<{{type_name}}>;
    async fn list(&self, params: {{type_name}}QueryParams) -> RepositoryResult<ResultPaging<{{type_name}}>>;
    async fn get(&self, {{type_snake}}_id: Uuid) -> RepositoryResult<Option<{{type_name}}>>;
    async fn delete(&self, {{type_snake}}_id: Uuid) -> RepositoryResult<()>;
}

