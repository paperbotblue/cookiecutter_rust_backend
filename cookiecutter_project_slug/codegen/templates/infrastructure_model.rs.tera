use diesel::prelude::*;
use crate::domain::models::{{ type_snake }}::{Create{{ type_name }}, {{ type_name }}, Update{{ type_name }}};
use crate::infrastructure::schema::{{ table_name }};
use uuid::Uuid;
use chrono::{Utc, DateTime};

#[derive(Queryable)]
pub struct {{ type_name }}Diesel {
{%- for item in type_fields %}
    pub {{ item.field }}: {{ item.typ }},
{%- endfor %}
}

impl From<{{ type_name }}> for {{ type_name }}Diesel {
    fn from(t: {{ type_name }}) -> Self {
        Self {
{%- for item in type_fields %}
            {{ item.field }}: t.{{ item.field }},
{%- endfor %}
        }
    }
}

#[derive(Insertable)]
#[diesel(table_name = {{ table_name }})]
pub struct Create{{ type_name }}Diesel {
    pub id: Uuid,
{%- for item in create_type_fields %}
    pub {{ item.field }}: {{ item.typ }},
{%- endfor %}
}

#[derive(AsChangeset)]
#[diesel(table_name = {{ table_name }})]
pub struct Update{{ type_name }}Diesel {
    pub id: Uuid,
{%- for item in create_type_fields %}
    pub {{ item.field }}: {{ item.typ }},
{%- endfor %}
}

impl From<{{ type_name }}Diesel> for {{ type_name }} {
    fn from(d: {{ type_name }}Diesel) -> Self {
        Self {
{%- for item in type_fields %}
            {{ item.field }}: d.{{ item.field }},
{%- endfor %}
        }
    }
}

impl From<Create{{ type_name }}> for Create{{ type_name }}Diesel {
    fn from(t: Create{{ type_name }}) -> Self {
        Self {
            id: Uuid::new_v4(),
{%- for item in create_type_fields %}
            {{ item.field }}: t.{{ item.field }},
{%- endfor %}
        }
    }
}

impl From<&Create{{ type_name }}> for Create{{ type_name }}Diesel {
    fn from(t: &Create{{ type_name }}) -> Self {
        Self {
            id: Uuid::new_v4(),
{%- for item in create_type_fields %}
            {{ item.field }}: t.{{ item.field }}.clone(),
{%- endfor %}
        }
    }
}

impl From<Update{{ type_name }}> for Update{{ type_name }}Diesel {
    fn from(t: Update{{ type_name }}) -> Self {
        Self {
            id: t.id,
{%- for item in create_type_fields %}
            {{ item.field }}: t.{{ item.field }},
{%- endfor %}
        }
    }
}

impl From<&Update{{ type_name }}> for Update{{ type_name }}Diesel {
    fn from(t: &Update{{ type_name }}) -> Self {
        Self {
            id: t.id,
{%- for item in create_type_fields %}
            {{ item.field }}: t.{{ item.field }}.clone(),
{%- endfor %}
        }
    }
}

impl From<Create{{ type_name }}Diesel> for {{ type_name }} {
    fn from(d: Create{{ type_name }}Diesel) -> Self {
        Self {
            id: Uuid::new_v4(),
{%- for item in create_type_fields %}
            {{ item.field }}: d.{{ item.field }},
{%- endfor %}
        }
    }
}

