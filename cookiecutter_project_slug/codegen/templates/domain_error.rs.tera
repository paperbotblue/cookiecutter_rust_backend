use super::response_code::ApiResponseCode;
use crate::domain::error::CommonError;
use crate::utils::append_to_file::append_to_file;
use std::error::Error;
use std::fmt;

#[derive(Debug)]
pub enum {{type_name}}Error {
    {{type_name}}AlreadyExists,
    {{type_name}}DoesNotExist,
    {{type_name}}NotAuthorised,
    InternalServerError(String),
}

// Implement `Display`
impl fmt::Display for {{type_name}}Error {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            {{type_name}}Error::{{type_name}}DoesNotExist => {
                write!(f, "{{type_name}} Fetching Error: Does Not Exist")
            }

            {{type_name}}Error::{{type_name}}AlreadyExists => {
                write!(f, "{{type_name}} Creation Error: Already Exists")
            }

            {{type_name}}Error::{{type_name}}NotAuthorised => {
                write!(f, "{{type_name}} Not Authorised")
            }

            {{type_name}}Error::InternalServerError(error) => {
                write!(f, "Internal Server Error(MiddlewareError): {}", error)
            }
        }
    }
}

impl From<{{type_name}}Error> for CommonError {
    fn from(value: {{type_name}}Error) -> Self {
        let code = match value {
            {{type_name}}Error::{{type_name}}NotAuthorised => ApiResponseCode::Forbidden,
            {{type_name}}Error::{{type_name}}DoesNotExist => ApiResponseCode::NotFound,
            {{type_name}}Error::{{type_name}}AlreadyExists => ApiResponseCode::Conflict,
            {{type_name}}Error::InternalServerError(ref e) => {
                append_to_file("../../../error_logs.txt", e);
                ApiResponseCode::InternalServerError
            }
        };

        CommonError {
            message: value.to_string(),
            code: code.status_code(),
        }
    }
}

impl Error for {{type_name}}Error {}
