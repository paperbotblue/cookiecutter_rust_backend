use crate::{
    api::dto::{{type_snake}}::{Create{{type_name}}DTO, {{type_name}}DTO, Update{{type_name}}DTO},
    domain::{
        models::{{type_snake}}::{Create{{type_name}}, {{type_name}}, Update{{type_name}}},
        repositories::repository::ResultPaging,
    },
};

impl From<{{type_name}}> for {{type_name}}DTO {
    fn from(value: {{type_name}}) -> Self {
        Self {
            {%- for item in type_fields %}
            {{ item.field }}: value.{{ item.field }},
            {%- endfor %}
        }
    }
}

impl From<Create{{type_name}}DTO> for Create{{type_name}} {
    fn from(value: Create{{type_name}}DTO) -> Self {
        Self {
            {%- for item in create_type_fields %}
            {{ item.field }}: value.{{ item.field }},
            {%- endfor %}
        }
    }
}

impl From<Update{{type_name}}DTO> for Update{{type_name}} {
    fn from(value: Update{{type_name}}DTO) -> Self {
        Self {
            id: value.id,
            {%- for item in create_type_fields %}
            {{ item.field }}: value.{{ item.field }},
            {%- endfor %}
        }
    }
}

impl From<Create{{type_name}}> for Create{{type_name}}DTO {
    fn from(value: Create{{type_name}}) -> Self {
        Self {
            {%- for item in create_type_fields %}
            {{ item.field }}: value.{{ item.field }},
            {%- endfor %}
        }
    }
}

impl From<Update{{type_name}}> for Update{{type_name}}DTO {
    fn from(value: Update{{type_name}}) -> Self {
        Self {
            id: value.id,
            {%- for item in create_type_fields %}
            {{ item.field }}: value.{{ item.field }},
            {%- endfor %}
        }
    }
}

impl From<ResultPaging<{{type_name}}>> for ResultPaging<{{type_name}}DTO> {
    fn from(value: ResultPaging<{{type_name}}>) -> Self {
        Self {
            total: value.total,
            items: value.items.into_iter().map(Into::into).collect(),
        }
    }
}
